name: Build Ubuntu

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_call:
  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-22.04
    steps:
      - name: Set environment variables
        run: |
          echo "ARTIFACT_NAME=eCall-${{ runner.os }}-${{ runner.arch }}" >> "$GITHUB_ENV"
          echo "CMAKE_BUILD_DIR=${{ runner.temp }}/bin" >> "$GITHUB_ENV"
          echo "CMAKE_INSTALL_DIR=${{ runner.temp }}/eCall-${{ runner.os }}-${{ runner.arch }}" >> "$GITHUB_ENV"
          echo "CMAKE_PREFIX_PATH=$Qt6_DIR" >> $GITHUB_ENV
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '6.9.0'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtserialport'
      - name: Install dependencies
        run: |
          sudo apt --yes install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-cursor0 libpulse-dev libudev-dev  uuid-dev python3-dev python3-numpy
      - name: Install Python packages
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install numpy
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        run: |
          NumPy_INCLUDE_DIR=$(python3 -c "import numpy; print(numpy.get_include())")
          cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_BUILD_PREFIX="${CMAKE_INSTALL_DIR}" -DNUMPY_INCLUDE_DIR=$NumPy_INCLUDE_DIR -B "${CMAKE_BUILD_DIR}" .
          cmake --build "${CMAKE_BUILD_DIR}" --parallel "$(nproc)"
          cmake --install "${CMAKE_BUILD_DIR}"
          
      - name: Build AppImage
        run: |
          wget --no-verbose "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          wget --no-verbose "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
          chmod +x linuxdeploy*.AppImage
          

          export OUTPUT=eCall-${VERSION}_Linux_x86_64.AppImage
          mkdir -p AppDir/usr/bin
          cp ./bin/app AppDir/usr/bin/
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

          # Crée un .desktop minimal
          cat > AppDir/usr/share/applications/eCall.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=eCall
          Exec=app
          Icon=eCall
          Categories=Utility;
          EOF

          # Crée une icône fictive (remplace par la tienne si dispo)
          convert -size 256x256 xc:blue AppDir/usr/share/icons/hicolor/256x256/apps/eCall.png

          export VERSION="v1.0.0"
          export EXTRA_QT_PLUGINS=svg
          export LD_LIBRARY_PATH=${QT_ROOT_DIR}/lib:$PWD/AppDir/usr/lib
          export OUTPUT=eCall-${VERSION}_Linux_x86_64.AppImage
          # Avoid shipping the debug information
          find AppDir -name \*.debug -delete
           ./linuxdeploy-x86_64.AppImage --appdir AppDir --desktop-file AppDir/usr/share/applications/eCall.desktop --output appimage --plugin qt

      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: eCall-AppImage
          path: ./*.AppImage
